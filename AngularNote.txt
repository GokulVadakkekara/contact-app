
                                             Angular-Front End Development
                                          -----------------------------------

                                                Basic Commands in Angular
                                            -------------------------------  
                                    

                    1. To create an Angular project : ng new project_name
                    2. To run an Angular project :ng s/ng serve
                    3. To generate components : ng g c components_name
                    4. To generate Service : ng g s service-folder/service-name
                    5. To generate build :ng build
                    6. To generate userdefined pipe : ng g p pipe-folder/pipe-name

                                                Basic Concepts In Angular
                                            -------------------------------

                    1. Module : To import 3rd party libraries ,also used to hold components_name , Root Module : AppModule (by default name}
                    2. Component : html,css,ts,also have a selector   ( ts- commonly called component file} ,Root Component : AppComponent (by default name, ethinde view mathrame index.html il kanu,ethilanu mattam varuthandu}
                    3. Selector : To replace selector tag with its html page
                    4. Decrator : To hold meta data, Starts with @ (data inside another data -meta data}
                    5. Set up path for component : To view a component in another webpage
                            - Use app.routingmodule.ts
                            - Use router-outlet selector in root component(AppComponent)- To navigate according to the user requested page 
                            - routerLink : used to redirect from one page to another
                    6. Data Binding :data sharing  within a component
                            6.1 One way Binding : data sharing in one direction ,either html to Ts or Ts to html
                                 6.1.1 Ts(component) to html file (view)
                                        6.1.1.1 String Interpolation : {{class property-name}} 
                                        6.1.1.2 Property Binding :[attribute-name] ="property-name"
                                 6.1.2 html (view) to Ts (component)
                                        6.1.2.1 Event Binding :(event-name)="function call" 
                                        6.1.2.2 Event Binding using $event : (event-name)="function name($event)"
                                        6.1.2.3 Event Binding using template reference variable
                            6.2 Two way Binding : data sharing in both direction
                                 6.2.1 ngModel : import FormsModule in AppModule/rootmodule
                                      (7.1}   [(ngModel)]="class Property"

                    7. Angular Forms
                            7.1 Template Driven Forms 
                            7.2 Model Driven Forms
                    8. Dependency Injection : To share data b/w dependent classes
                          - constructor(access-specifer variable-name:class name){} (ethil dependent cheyunath loginComponent aanu,variable nameum,class name yathu classne aano depend chiyanu athu koduka}
                    9. Angular Services : To share common logic with components
                    10. Angular Directives :DOM Manipulation 
                            10.1 Component Directive
                            10.2 Structurla Directive : to add/remove html items
                                  - *ngif ="condition"
                                  - *ngFor ="let variable-name of array-name"
                            10.3 Attribute Directive : to apply style to html elements
                                  - ngClass (style sheet il ng class aayi paranju koduka }
                                  - ngForm
                    11. Parent child data shairing
                            - Child to Parent communication : @Output decorator
                            - Parent to Child communication : @Input decorator
                    12. Asynchronous function handling in Angular
                            - Using Rxjs (Reactive Extension for JavaScript) library
                                - Use Observable to resolve Asynchronous function 
                                     - resolve state: subscribe(observer:callback)
                                         - observer can be next: required, where we get 200 response code
                                         - error optional to get all http response error
                                     - reject state: catchError(callback) (catchError directly apply chiyan pattila pipe() use cheythale apply chiyan pattu}
                                          - error(): to get error response when you subscribe it
                    13. Api call using Angular: HttpClient class - have all http methods
                           - import HttpClientModule in AppModule
                    14. ActivatedRoute : Provides access to information about a route associated with a component that is loaded in an outlet.
                    15. Pipe : Use pipes to transform strings, currency amounts, dates, and other data for display
                                syntax : 
                                        value_expression | pipe-operator [ :optional1 [ : optional2 [ :optional3 ] ] ]



                        

                                     